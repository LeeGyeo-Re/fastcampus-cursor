{"ast":null,"code":"import { create } from 'zustand';\nimport { supabase } from '../lib/supabaseClient';\nconst useBoardStore = create((set, get) => ({\n  // 상태\n  currentBoard: null,\n  columns: [],\n  cards: [],\n  isLoading: false,\n  error: null,\n  // 액션들\n  setLoading: loading => set({\n    isLoading: loading\n  }),\n  setError: error => set({\n    error\n  }),\n  // 보드 관련 액션\n  setCurrentBoard: board => set({\n    currentBoard: board\n  }),\n  // 보드 데이터 가져오기\n  fetchBoardData: async slug => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      // 1. slug로 보드 정보 가져오기\n      const {\n        data: board,\n        error: boardError\n      } = await supabase.from('boards').select('*').eq('slug', slug).single();\n      if (boardError) throw boardError;\n\n      // 2. 보드의 컬럼들 가져오기\n      const {\n        data: columns,\n        error: columnsError\n      } = await supabase.from('columns').select('*').eq('board_id', board.id).order('position');\n      if (columnsError) throw columnsError;\n\n      // 3. 보드의 카드들 가져오기 (컬럼이 없으면 빈 배열)\n      let cards = [];\n      if (columns && columns.length > 0) {\n        const {\n          data: cardsData,\n          error: cardsError\n        } = await supabase.from('cards').select('*').in('column_id', columns.map(col => col.id)).order('position');\n        if (cardsError) throw cardsError;\n        cards = cardsData || [];\n      }\n      set({\n        currentBoard: board,\n        columns: columns || [],\n        cards: cards,\n        isLoading: false\n      });\n    } catch (error) {\n      set({\n        error: error.message,\n        isLoading: false\n      });\n    }\n  },\n  // 컬럼 관련 액션\n  addColumn: async title => {\n    const {\n      currentBoard,\n      columns\n    } = get();\n    if (!currentBoard) return;\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('columns').insert({\n        title,\n        position: columns.length,\n        board_id: currentBoard.id\n      }).select().single();\n      if (error) throw error;\n      set({\n        columns: [...columns, data]\n      });\n    } catch (error) {\n      set({\n        error: error.message\n      });\n    }\n  },\n  updateColumn: async (columnId, updates) => {\n    try {\n      const {\n        error\n      } = await supabase.from('columns').update(updates).eq('id', columnId);\n      if (error) throw error;\n      set({\n        columns: get().columns.map(col => col.id === columnId ? {\n          ...col,\n          ...updates\n        } : col)\n      });\n    } catch (error) {\n      set({\n        error: error.message\n      });\n    }\n  },\n  deleteColumn: async columnId => {\n    try {\n      const {\n        error\n      } = await supabase.from('columns').delete().eq('id', columnId);\n      if (error) throw error;\n      set({\n        columns: get().columns.filter(col => col.id !== columnId),\n        cards: get().cards.filter(card => card.column_id !== columnId)\n      });\n    } catch (error) {\n      set({\n        error: error.message\n      });\n    }\n  },\n  // 카드 관련 액션\n  addCard: async (columnId, title, description = null) => {\n    const {\n      cards\n    } = get();\n    const columnCards = cards.filter(card => card.column_id === columnId);\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('cards').insert({\n        title,\n        description,\n        position: columnCards.length,\n        column_id: columnId\n      }).select().single();\n      if (error) throw error;\n      set({\n        cards: [...cards, data]\n      });\n    } catch (error) {\n      set({\n        error: error.message\n      });\n    }\n  },\n  updateCard: async (cardId, updates) => {\n    try {\n      const {\n        error\n      } = await supabase.from('cards').update(updates).eq('id', cardId);\n      if (error) throw error;\n      set({\n        cards: get().cards.map(card => card.id === cardId ? {\n          ...card,\n          ...updates\n        } : card)\n      });\n    } catch (error) {\n      set({\n        error: error.message\n      });\n    }\n  },\n  deleteCard: async cardId => {\n    try {\n      const {\n        error\n      } = await supabase.from('cards').delete().eq('id', cardId);\n      if (error) throw error;\n      set({\n        cards: get().cards.filter(card => card.id !== cardId)\n      });\n    } catch (error) {\n      set({\n        error: error.message\n      });\n    }\n  },\n  // 드래그 앤 드롭 관련 액션\n  moveCard: async (cardId, newColumnId, newPosition) => {\n    try {\n      // newColumnId가 null이면 position만 업데이트\n      const updateData = newColumnId ? {\n        column_id: newColumnId,\n        position: newPosition\n      } : {\n        position: newPosition\n      };\n      const {\n        error\n      } = await supabase.from('cards').update(updateData).eq('id', cardId);\n      if (error) throw error;\n\n      // 로컬 상태 업데이트\n      set({\n        cards: get().cards.map(card => {\n          if (card.id === cardId) {\n            return newColumnId ? {\n              ...card,\n              column_id: newColumnId,\n              position: newPosition\n            } : {\n              ...card,\n              position: newPosition\n            };\n          }\n          return card;\n        })\n      });\n    } catch (error) {\n      set({\n        error: error.message\n      });\n    }\n  },\n  // 카드 위치 일괄 업데이트 (드래그 앤 드롭 시 사용)\n  updateCardPositions: async updates => {\n    try {\n      // 여러 카드의 위치를 한 번에 업데이트\n      for (const update of updates) {\n        const {\n          error\n        } = await supabase.from('cards').update({\n          position: update.position\n        }).eq('id', update.cardId);\n        if (error) throw error;\n      }\n\n      // 로컬 상태 업데이트\n      const updatedCards = get().cards.map(card => {\n        const update = updates.find(u => u.cardId === card.id);\n        return update ? {\n          ...card,\n          position: update.position\n        } : card;\n      });\n      set({\n        cards: updatedCards\n      });\n    } catch (error) {\n      set({\n        error: error.message\n      });\n    }\n  }\n}));\nexport default useBoardStore;","map":{"version":3,"names":["create","supabase","useBoardStore","set","get","currentBoard","columns","cards","isLoading","error","setLoading","loading","setError","setCurrentBoard","board","fetchBoardData","slug","data","boardError","from","select","eq","single","columnsError","id","order","length","cardsData","cardsError","in","map","col","message","addColumn","title","insert","position","board_id","updateColumn","columnId","updates","update","deleteColumn","delete","filter","card","column_id","addCard","description","columnCards","updateCard","cardId","deleteCard","moveCard","newColumnId","newPosition","updateData","updateCardPositions","updatedCards","find","u"],"sources":["/Users/igyeole/Desktop/fastcampus/workspace/03-cursor-vibe-coding/src/store/boardStore.js"],"sourcesContent":["import { create } from 'zustand'\nimport { supabase } from '../lib/supabaseClient'\n\nconst useBoardStore = create((set, get) => ({\n  // 상태\n  currentBoard: null,\n  columns: [],\n  cards: [],\n  isLoading: false,\n  error: null,\n\n  // 액션들\n  setLoading: (loading) => set({ isLoading: loading }),\n  setError: (error) => set({ error }),\n\n  // 보드 관련 액션\n  setCurrentBoard: (board) => set({ currentBoard: board }),\n  \n  // 보드 데이터 가져오기\n  fetchBoardData: async (slug) => {\n    set({ isLoading: true, error: null })\n    \n    try {\n      // 1. slug로 보드 정보 가져오기\n      const { data: board, error: boardError } = await supabase\n        .from('boards')\n        .select('*')\n        .eq('slug', slug)\n        .single()\n\n      if (boardError) throw boardError\n\n      // 2. 보드의 컬럼들 가져오기\n      const { data: columns, error: columnsError } = await supabase\n        .from('columns')\n        .select('*')\n        .eq('board_id', board.id)\n        .order('position')\n\n      if (columnsError) throw columnsError\n\n      // 3. 보드의 카드들 가져오기 (컬럼이 없으면 빈 배열)\n      let cards = []\n      if (columns && columns.length > 0) {\n        const { data: cardsData, error: cardsError } = await supabase\n          .from('cards')\n          .select('*')\n          .in('column_id', columns.map(col => col.id))\n          .order('position')\n\n        if (cardsError) throw cardsError\n        cards = cardsData || []\n      }\n\n      set({\n        currentBoard: board,\n        columns: columns || [],\n        cards: cards,\n        isLoading: false\n      })\n    } catch (error) {\n      set({ error: error.message, isLoading: false })\n    }\n  },\n\n  // 컬럼 관련 액션\n  addColumn: async (title) => {\n    const { currentBoard, columns } = get()\n    if (!currentBoard) return\n\n    try {\n      const { data, error } = await supabase\n        .from('columns')\n        .insert({\n          title,\n          position: columns.length,\n          board_id: currentBoard.id\n        })\n        .select()\n        .single()\n\n      if (error) throw error\n\n      set({ columns: [...columns, data] })\n    } catch (error) {\n      set({ error: error.message })\n    }\n  },\n\n  updateColumn: async (columnId, updates) => {\n    try {\n      const { error } = await supabase\n        .from('columns')\n        .update(updates)\n        .eq('id', columnId)\n\n      if (error) throw error\n\n      set({\n        columns: get().columns.map(col =>\n          col.id === columnId ? { ...col, ...updates } : col\n        )\n      })\n    } catch (error) {\n      set({ error: error.message })\n    }\n  },\n\n  deleteColumn: async (columnId) => {\n    try {\n      const { error } = await supabase\n        .from('columns')\n        .delete()\n        .eq('id', columnId)\n\n      if (error) throw error\n\n      set({\n        columns: get().columns.filter(col => col.id !== columnId),\n        cards: get().cards.filter(card => card.column_id !== columnId)\n      })\n    } catch (error) {\n      set({ error: error.message })\n    }\n  },\n\n  // 카드 관련 액션\n  addCard: async (columnId, title, description = null) => {\n    const { cards } = get()\n    const columnCards = cards.filter(card => card.column_id === columnId)\n\n    try {\n      const { data, error } = await supabase\n        .from('cards')\n        .insert({\n          title,\n          description,\n          position: columnCards.length,\n          column_id: columnId\n        })\n        .select()\n        .single()\n\n      if (error) throw error\n\n      set({ cards: [...cards, data] })\n    } catch (error) {\n      set({ error: error.message })\n    }\n  },\n\n  updateCard: async (cardId, updates) => {\n    try {\n      const { error } = await supabase\n        .from('cards')\n        .update(updates)\n        .eq('id', cardId)\n\n      if (error) throw error\n\n      set({\n        cards: get().cards.map(card =>\n          card.id === cardId ? { ...card, ...updates } : card\n        )\n      })\n    } catch (error) {\n      set({ error: error.message })\n    }\n  },\n\n  deleteCard: async (cardId) => {\n    try {\n      const { error } = await supabase\n        .from('cards')\n        .delete()\n        .eq('id', cardId)\n\n      if (error) throw error\n\n      set({\n        cards: get().cards.filter(card => card.id !== cardId)\n      })\n    } catch (error) {\n      set({ error: error.message })\n    }\n  },\n\n  // 드래그 앤 드롭 관련 액션\n  moveCard: async (cardId, newColumnId, newPosition) => {\n    try {\n      // newColumnId가 null이면 position만 업데이트\n      const updateData = newColumnId \n        ? { column_id: newColumnId, position: newPosition }\n        : { position: newPosition }\n\n      const { error } = await supabase\n        .from('cards')\n        .update(updateData)\n        .eq('id', cardId)\n\n      if (error) throw error\n\n      // 로컬 상태 업데이트\n      set({\n        cards: get().cards.map(card => {\n          if (card.id === cardId) {\n            return newColumnId \n              ? { ...card, column_id: newColumnId, position: newPosition }\n              : { ...card, position: newPosition }\n          }\n          return card\n        })\n      })\n    } catch (error) {\n      set({ error: error.message })\n    }\n  },\n\n  // 카드 위치 일괄 업데이트 (드래그 앤 드롭 시 사용)\n  updateCardPositions: async (updates) => {\n    try {\n      // 여러 카드의 위치를 한 번에 업데이트\n      for (const update of updates) {\n        const { error } = await supabase\n          .from('cards')\n          .update({ position: update.position })\n          .eq('id', update.cardId)\n\n        if (error) throw error\n      }\n\n      // 로컬 상태 업데이트\n      const updatedCards = get().cards.map(card => {\n        const update = updates.find(u => u.cardId === card.id)\n        return update ? { ...card, position: update.position } : card\n      })\n\n      set({ cards: updatedCards })\n    } catch (error) {\n      set({ error: error.message })\n    }\n  }\n}))\n\nexport default useBoardStore"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}